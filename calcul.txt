EXERCICE 1:

1)
def suite(a, N):
    x0 = a + 1
    x = [x0]
    
    for n in range(N):
        xn = (1/2) * (x[n] + a / x[n])
        x.append(xn)
    
    return x
	
	
2)a)
a = 20
N = 5  

x_values = suite(a, N)

for n, x in enumerate(x_values):
    print(f"x{n}: {x}")
	
x0: 21
x1: 11.619047619047619
x2: 10.499508663874552
x3: 10.499999046325682
x4: 10.5
x5: 10.5
  
  
  b)
  n_values = np.arange(N + 1)
  y_values = np.sqrt(a) * np.ones_like(n_values)
  plt.plot(n_values, x_values, 'bo-', label='Termes de la suite')
  plt.plot(n_values, y_values, 'r-', label='Droite')
  
  
  (graphe dans l'image dans le dossier)
  
  c)
	la limite est la racine carree de a
	
	
  d)
		a = 50
		N = 4

		x_values = suite(a, N)
		approx_sqrt_50 = x_values[-1]

		print("Valeur approchée de √50 :", approx_sqrt_50)
		
		
		
		Valeur approchée de √50 : 7.07106
		
# exercice 2
#PARTIE 1
# 1-a
def verification(z):
    unique_elements = np.unique(z)
    return len(unique_elements) == len(z)
# b
x = np.array([[91], [271], [451], [530], [631], [721], [800]])
y = np.array([[41], [89], [97], [89], [67], [73], [2]])
#c
print(verification(x))
#true
#justification : on les xi ̸= xj , pour tout 0 ≤ i, j ≤ tels que i ̸= j donc Il existe un unique polynôme d’interpolation
True






EXERCICE 2:
PARTIE II:
1)a)
def coefficients(x, y, p):
    n = len(x)
    A1 = np.ones((n, 1))
    A2 = np.zeros((n, p))
    
    for i in range(p):
        A2[:, i] = x**(i+1)
    
    A = np.concatenate((A1, A2), axis=1)
    tA = np.transpose(A)
    tAy = np.dot(tA, y)
    tAA = np.dot(tA, A)
    
    # Calcul des coefficients du polynôme
    coefficients = np.dot(np.linalg.inv(tAA), tAy)
    
    return coefficients, A